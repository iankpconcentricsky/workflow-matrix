on:
  push:
    branches: [develop, staging, main]
  pull_request:
    branches: [staging]
    type: [open]

env:
  CLUSTER_ZONE: us-east1-b
  DOCKER_SERVER: us-east1-docker.pkg.dev
  SERVICE_ACCOUNT_EMAIL: github-csky-staging@concentric-sky-development.iam.gserviceaccount.com
  REVIEW_CLUSTER_NAME: iposs-cluster
  STAGING_CLUSTER_NAME: iposs-cluster
  PRODUCTION_CLUSTER_NAME: iposs-cluster

jobs:
  Test:
    runs-on: ubuntu-latest
    name: Run Code Tests
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3

      - name: Run tests
        run: "echo Tests pass!"


  Build:
    name: Create Docker Images
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [Test]
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find Last Successful Workflow Commit
        id: lastSuccessfulWorkflowCommit
        uses: nrwl/nx-set-shas@v2

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: "npm"

      - name: Install Project Dependencies
        run: npm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Use Docker Buildx Cache
        uses: actions/cache@v2
        with:
          path: ./docker-cache/
          key: ${{ runner.os }}-docker-cache

      - name: Authorize To Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: Configure Artifact Registry Authorization (within .docker/config)
        run: gcloud auth configure-docker ${{ env.DOCKER_SERVER }}

      - name: Build, Push Images
        run: npx nx affected --target=docker-build --args="--version=$(git rev-parse --short ${{ github.sha }}) --output-type=registry" --base=${{ steps.lastSuccessfulWorkflowCommit.outputs.base }}



  DeployReview:
    name: Deploy Images To Review Cluster
    if: github.event_name == 'push' && github.ref_name == 'develop'
    runs-on: ubuntu-latest
    needs: [Build]
    environment:
      name: Review
      url: http://example.com/#review
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: "npm"

      - name: Install Project Dependencies
        run: npm install

      - name: Find Last Successful Workflow Commit
        id: lastSuccessfulWorkflowCommit
        uses: nrwl/nx-set-shas@v2

      - name: Authorize To Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: Install Gcloud CLI
        uses: google-github-actions/setup-gcloud@v0

      - name: Install Kubernetes CLI tools
        uses: yokawasa/action-setup-kube-tools@v0.7.1
        with:
          setup-tools: |
            kubectl

      - name: Configure Kubectl CLI To Cluster (within .kube/config)
        run: gcloud container clusters get-credentials ${{ env.REVIEW_CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }}

      - name: Add Github Secrets GCP Service Account Key
        run: |
          kubectl delete secret gcpsm-service-account-secret --ignore-not-found=true
          kubectl create secret generic gcpsm-service-account-secret --from-literal=gcpsm-private-key='${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Deploy To Cluster
        run: kubectl apply -f ./kubernetes/

      - name: Rollout new images
        run: npx nx affected --target=kubectl-set-image --args="--version=$(git rev-parse --short ${{ github.sha }}) --deployment-name=kubeapp" --base=${{ steps.lastSuccessfulWorkflowCommit.outputs.base }}

      #- name: Rollout change
      #  run: |
      #    kubectl rollout restart deployment/kubeapp
      #    kubectl rollout status -w deployment/kubeapp
